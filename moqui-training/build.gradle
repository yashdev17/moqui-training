apply plugin: 'groovy'

// sourceCompatibility = 11
// targetCompatibility = 11

def componentNode = parseComponent(project)
version = componentNode.'@version'

def moquiDir = projectDir.parentFile.parentFile.parentFile
def frameworkDir = file(moquiDir.absolutePath + '/framework')
def jarBaseName = componentNode.'@name'

// to run use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0' }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    mavenCentral()
}

// Log4J has annotation processors, disable to avoid warning
tasks.withType(JavaCompile) { options.compilerArgs << "-proc:none" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-proc:none" }

dependencies {
    implementation project(':framework')
    implementation 'com.auth0:java-jwt:4.4.0'
    runtimeOnly 'mysql:mysql-connector-java:5.1.47'
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
// no longer workds as of gradle 4.8 or possibly earlier, use clear() instead: check.dependsOn.remove(test)
check.dependsOn.clear()

task cleanLib(type: Delete) { delete fileTree(dir: projectDir.absolutePath+'/lib', include: '*') }
clean.dependsOn cleanLib

jar {
    destinationDirectory = file(projectDir.absolutePath + '/lib')
    archiveBaseName = jarBaseName
}
tasks.register("omsSetup") {
    doLast {
        def patches = [
                "${projectDir}/patches/JwtToken.patch",
                "${projectDir}/patches/EntityCrypto.patch"
        ]

        def copyFiles = [
                [src: "${projectDir}/conf/jwtKey.txt", dest: "${moquiDir}/runtime/conf/"],
                [src: "${projectDir}/src/main/groovy/co/hotwax/auth/JWTManager.groovy", dest: "${frameworkDir}/src/main/groovy/co/hotwax/auth"],
                [src: "${projectDir}/src/main/groovy/co/hotwax/util/OmsEntityCrypto.groovy", dest: "${frameworkDir}/src/main/groovy/co/hotwax/util"],
                [src: "${projectDir}/shiro.ini", dest: "${frameworkDir}/src/main/resources"]
        ]

        // Apply all patches
        patches.each { patchFile ->
            println "Applying patch: $patchFile"
            exec {
                workingDir rootProject.projectDir
                commandLine 'patch', '-p0', '-i', patchFile
            }
        }

        // Ensure directories exist and copy files
        copyFiles.each { fileMap ->
            def destDir = file(fileMap.dest)
            if (!destDir.exists()) {
                println "Creating directory: $destDir"
                destDir.mkdirs()
            }
            println "Copying file from ${fileMap.src} to ${fileMap.dest}"
            copy {
                from fileMap.src
                into destDir
            }
            //ant.move(file: fileMap.src, todir: destDir)
            println "Successfully copied file to ${fileMap.dest}"
        }
    }
}


task copyDependencies { doLast {
    copy { from (configurations.runtimeClasspath - project(':framework').configurations.runtimeClasspath - project(':framework').jar.archivePath)
        into file(projectDir.absolutePath + '/lib') }
} }
copyDependencies.dependsOn cleanLib
jar.dependsOn copyDependencies
